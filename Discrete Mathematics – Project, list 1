import java.util.Arrays;
import java.util.List;

public class HelloWorld {

	public static void main(String[] args) {
		double X = 4;
		double Y = 2;
		double a = floor(X);
		double b = ceilling(X);
		double c = fractional(X);
		double d = mod(X, Y);
		/// generating n prime numbers
		int e = getPrime(2);
		System.out.println("a: " + a + "b: " + b + "c: " + c + "d: " + d + "e: " + e);

		// generating permutation
//		int n = 3;
//		char[] perm = new char[n];
//		permutation(perm, 0, "cab");
		
		
		/// checking permutation
	    String input = "1234"; 
		if (ispermutation(input))
			System.out.println("Given sequence " + input + " has all unique numbers");
		else
			System.out.println("The String " + input + " has duplicate numbers");
		// second method
	        int n = input.length(); 
	        HelloWorld permutation = new HelloWorld(); 
	        permutation.permute(input, 0, n-1); 
	}

//	private static void permutation(char[] perm, int pos, String str) {
//		if (pos == perm.length) {
//			System.out.println(new String(perm));
//		} else {
//			for (int i = 0; i < str.length(); i++) {
//				perm[pos] = str.charAt(i);
//				permutation(perm, pos + 1, str);
//			}
//		}
//	}

	public static int getPrime(int number) {
		int i = 2;
		while (true) {
			if (sieveOfEratosthenes(i)) {
				System.out.println(i);
				number--;
			}
			i++;
			if (number == 0)
				break;
		}
		return 0;
	}

	// prime
	public static boolean isPrime(int number) {
		for (int i = 2; i <= number / 2; i++) {
			if (number % i == 0) {
				return false;
			}
		}
		return true;
	}

	// ceiling
	public static double ceilling(double number) {
		double x;
		if (number % 1 == 0)
			x = number;
		else if (number > 0) {
			x = (number - (number % 1) + 1);
		} else {
			x = (number - (number % 1));
		}
		return x;
	}

	// floor
	public static double floor(double number) {
		double x;
		if (number % 1 == 0)
			x = number;
		else if (number > 0) {
			x = (number - (number % 1));
		} else {
			x = (number - (number % 1) - 1);
		}
		return x;
	}

	// fractional
	public static double fractional(double number) {
		double x;
		x = number - (floor(number));
		return x;
	}

	// mod
	public static double mod(double number1, double number2) {
		double x;
		x = number1 - (number2 * floor(number1 / number2));
		return x;
	}

	//// sieveoferatosthenes
	public static final boolean sieveOfEratosthenes(int number) {
		boolean[] sieve = null;
		if (number == 1) {
			return false;
		}
		if (sieve == null || number >= sieve.length) {
			int start = 2;

			if (sieve == null) {
				sieve = new boolean[number + 1];
			} else if (number >= sieve.length) {
				sieve = Arrays.copyOf(sieve, number + 1);
			}

			for (int i = start; i <= Math.sqrt(number); i++) {
				if (!sieve[i]) {
					for (int j = i * 2; j <= number; j += i) {
						sieve[j] = true;
					}
				}
			}
		}
		return !sieve[number];
	}

	// ispermutation
	public static boolean ispermutation(String str) {
		for (int i = 0; i < str.length(); i++)
			for (int j = i + 1; j < str.length(); j++)
				if (str.charAt(i) == str.charAt(j))
					return false;
		return true;
	}
	 private void permute(String str, int l, int r) 
	    { 
	        if (l == r) 
	            System.out.println(str); 
	        else
	        { 
	            for (int i = l; i <= r; i++) 
	            { 
	                str = swap(str,l,i); 
	                permute(str, l+1, r); 
	                str = swap(str,l,i); 
	            } 
	        } 
	    } 
	    public String swap(String a, int i, int j) 
	    { 
	        char temp; 
	        char[] charArray = a.toCharArray(); 
	        temp = charArray[i] ; 
	        charArray[i] = charArray[j]; 
	        charArray[j] = temp; 
	        return String.valueOf(charArray); 
	    } 
}
